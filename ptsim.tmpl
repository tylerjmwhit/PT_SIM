--------------------------------------------------------------------------

            +-------------------------+
            | CS 450                  |
            | PROJECT: PT SIM         |
            | DESIGN DOCUMENT         |
            +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Tyler Whitmarsh <whitmars@sonoma.edu>
Jeremy Pearson <pearsonje@sonoma.edu>
Justin Scannell <scanneju@sonoma.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission or
>> bug notes, please give them here.

If this counts, we are assuming valid input for whatever is given to the
program. Therefore invalid page table inputs will cause undefined behavior.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than man pages, course
>> text, lecture notes, and course staff.

Used https://cplusplus.com/reference/ and
https://www.geeksforgeeks.org/c-bitset-and-its-application/ in order to
understand how bitset works.

               PAGE TABLE SIMULATOR
               ====================

---- EXPLORE THE PROBLEM ----

>> A1: Given the following description of a page table:
>>
>> 7 8 32
>> 0 1 0 0
>> 1 1 4 0
>> 1 1 5 1
>> 1 1 2 0
>>
>> Translate the following sequence of address requests using the method
>> described for Part A.
>>
>> 0x05
>> 0x7F
>> 0x3B
>> 0x7F
>> 0x40
>>

Disk
95
155
95
160


>> A2: It is ok if your program just reads every row of the input file,
>> but it is possible to compute how many rows you might expect.
>> Show a computation to determine how many rows are in the page table
>> using the first row of the input file shows above: 7 8 32

2^(n-log2(size)) -> 2^(7-log2(32)) = virtual table size
2^(m-log2(size)) -> 2^(8-log2(32)) = physical table size


---- DATA STRUCTURES ----

>> A3: Copy here the declaration of each new or changed `struct',
>> `struct' member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 2--25 words.
>> Recall the instructions required at least one data structure.
//number of bits to translate string into with bitset
const static int bitsize = 64;

// Holds all the information about a single page
struct page{
	int valid; // statues of valid bit
	int perm; // status of permission bits
	int frame; //frame number
	string bframe; // frame number in binary
	int LRU; // recently used bit
};

// holds all the information about the page table
struct pageTable{
	int n; // number of bits in virtual address
	int m; // number of bits in physical address
	int size; // Size of page in bytes
	int vec_size; // size of virtual address table
	vector<page> table; //vector holding all the pages
	void init_sizes(){ // init vector table after n, m and size are read in
		vec_size = exp2(n - log2(size));
		table.resize(vec_size);
	}
};

---- FUNCTIONS ----

>> A4: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.
>> Recall the instructions required at least two functions
>> in your project, and these should be reflected in A4 and/or B3.
/*
FUNCTION Prototype: pageTable create_table(char* filename);
INTENT: Reads in a file and creates a page table out of the file
@param char* filename: Name of the file to turn into pagetable
@return: pageTable struct containing the page table
@post: pageTable is returned to the calling function
@pre: a valid filename needs to be obtained
*/

/*
FUNCTION Prototype:
void translate(string& tempinput, int& off, int& location,
 				int& output, const pageTable& tablein);
INTENT: Helper function to handles the translation of a virtual address
		into a physical address
@param const string& tempinput: string containing virtual address
@param const int& off: number of offset bits
@param int& location: location of entry in pagetable
@param int& output: physical address version of virtual address
@param const pageTable& tablein: struct holding the page table
@return:  nothing function is void
@post: int& location will contain the location of the virtual address in the
	   pagetable. int& output will now contain the string representing the
 	   translation from virtual to physical address
@pre: tablein needs to contain a valid pagetable
*/


/*
FUNCTION Prototype: void translate_address_A(pageTable tablein);
INTENT: Handles the translation of a virtual address into a physical address
doesnâ€˜t use any page replacement algorithm
@param const pageTable& tablein: struct holding the page table
@return:  nothing function is void
@post: nothing
@pre: tablein needs to contain a valid pagetable
*/


---- ALGORITHMS ----

>> A5: Describe your general strategy for managing bit-wise
>> transformations of data, and relevant support functions you used
>> to accomplish this.

To transform a string into their integer representation we used stoi() from
the string class. Stoi lets us use 0 as the last parameter which sets the base
as a wildcard. This means the function will translate base 10 and hexadecimal
numbers in strings into base ten numbers as ints without any extra checking as
long as hexadecimal numbers have the prefix 0x in front of the number.

To translate the ints into a binary representation we used
bitset<64>(int).to_string(). This function will turn an integer into a 64 bit
binary representation of the integer.

The combination of these two functions were all we needed in order to do the
translation of the virtual addresses into physical addresses.




               CLOCK REPLACEMENT SIMULATOR
               ===========================

---- EXPLORE THE PROBLEM ----

>> B1: Given the following description of a page table:
>>
>> 7 8 32
>> 0 1 0 0
>> 1 1 4 0
>> 1 1 5 1
>> 1 1 2 0
>>
>> Translate the following sequence of address requests using the method
>> described for Part B.
>>
>> 0x05
>> 0x7F
>> 0x3B
>> 0x7F
>> 0x40
>>

Page Fault 133
95
Page Fault 187
95
Page Fault 128

Page Fault
---- DATA STRUCTURES ----

>> B2: Copy here the declaration of each new or changed `struct',
>> `struct' member, global or static variable, `typedef', or enumeration.
>> Identify the purpose of each in 2--25 words.
>> Do not repeat anything already described in A3.

// Represents the clock used in our page replacement algorithm
struct clockS{
	page* currentPage;// Pointer to single page entry
	int position;// Current position of the clock
};

---- FUNCTIONS ----

>> B3: Provide a prototype and documentation for each function
>> you have introduced to support this portion of the project.
>> Use the Google Style Guide for function documentation.
>> Do not repeat anything already described in A4.

/*
FUNCTION NAME: void translate_address_B(pageTable tablein);
INTENT: This function uses the clock algorithm to evict pages when a request
		for a invalid page entry comes in.
@param: pageTable tablein: struct containing Page Table
@post: After this function is complete, all translated addresses will be output
 	   and the page table will be updated with the evicted page entries
@pre: Page Table should be created with valid page entries
*/


---- ALGORITHMS ----

>> B4: Describe (i) the data structure you used to search through the
frames
>> following the clock rotation, and (ii) reason through the number of bits
>> you would need if you were using a space-efficient representation
>> (in particular, describe how might implement a row of the table in C).
/*
(i): We created the clockS struct to search through frames following the clock
 rotation. The clockS struct has a pointer currentPage that points to a single
 page entry and an integer to keep track of its position. We increment the
 position and then point the currentPage pointer to the next page in our
 page table.
(ii): We are currently representing each page as a struct holding 4 ints and a
string so it is very space inefficient. In order to make the page more efficient
we could store all the information about the page as bits which would require
1 bit for valid, 3 bits for permission, 1 more bit for the LRU bit, then the
amount of bits for the frame is determined by size of the page table. The
formula to determine this is
	exp2(physical_address_size - log2(size _of_page_in_bytes))
Using this representation of the page we can save a ton of space but our logic
to translate the addresses becomes much more complicated.

*/

---- RATIONALE ----

>> B5: Did you need to handle any ambiguous scenarios or corner cases
>> for the Clock algorithm, left unspecified in the algorithm's
>> description? For example. how does your program behave when
>> there is a page table and no valid entries to evict?
>> Explain any judgements you used in implementing
>> unclear or unspecified behavior.

In our program, we are assuming that the input given is valid, and we are
taking it from there. Since, in the instructions, we are told to assume that
the input given is valid, that is the rationale that we are following.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Any other comments?


